%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 801.000000 707.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 801 707
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 801 707
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /two put
dup 35 /hyphen put
dup 36 /A put
dup 37 /S put
dup 38 /C put
dup 39 /o put
dup 40 /r put
dup 41 /e put
dup 42 /space put
dup 43 /n put
dup 44 /t put
dup 45 /w put
dup 46 /k put
dup 47 /c put
dup 48 /s put
dup 49 /parenleft put
dup 50 /L put
dup 51 /T put
dup 52 /E put
dup 53 /comma put
dup 54 /W put
dup 55 /i put
dup 56 /m put
dup 57 /a put
dup 58 /x put
dup 59 /period put
dup 60 /parenright put
dup 61 /g put
dup 62 /f put
dup 63 /u put
dup 64 /N put
dup 65 /d put
dup 66 /D put
dup 67 /v put
dup 68 /y put
dup 69 /G put
dup 70 /colon put
dup 71 /p put
dup 72 /l put
dup 73 /Z put
dup 74 /b put
dup 75 /B put
dup 76 /h put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<










00>] def
/CharStrings 46 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/comma 4 def
/hyphen 5 def
/period 6 def
/two 7 def
/colon 8 def
/A 9 def
/B 10 def
/C 11 def
/D 12 def
/E 13 def
/G 14 def
/L 15 def
/M 16 def
/N 17 def
/S 18 def
/T 19 def
/W 20 def
/Z 21 def
/a 22 def
/b 23 def
/c 24 def
/d 25 def
/e 26 def
/f 27 def
/g 28 def
/h 29 def
/i 30 def
/k 31 def
/l 32 def
/m 33 def
/n 34 def
/o 35 def
/p 36 def
/r 37 def
/s 38 def
/t 39 def
/u 40 def
/v 41 def
/w 42 def
/x 43 def
/y 44 def
/uni2B91 45 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec

38DAD78B40A550E502B1FB56929A70469C415D55222B9F1E6CFDFEB272A596DAD09F6017214BDFF0FAF33205203DC401119EDB2E5C1B5B629A2CE83E5050D572FBA2E84A48EC4D31C9BF837A6AAA0EAAEEFEDFF5F8BF5876203C75517F2024162EC56B6FDD4A5C95DB3DA860ACFCE89A52D5BD20B551505BD04B5F4761FDBC1A2578A250C0325694F6B9197D4987A8EE91E2A86B4E2668D53ED1D236608880D0B6EEEDC046D5119344471654CD3D41BB1128AC9DFBDC22B62F000594D51520E75435E4B090EFC93EE7BF52BEEBCCA3FF814592471026B785C5D97BC3D1996E235D93771F9A61FF08D565C54D6A1CB047F4392D7C4BD51967A9C4D7A32289B0E4FA3F024188033FC173DFF4308068921F98807CC855BF139176D5CC12B891A80848213ACE09658D87102AD53DD963EDE23D3ED38CC05AD36CA882DAE18E1B8C68765F4DF382BBB0BE4544C3E710738BDAA19C42CF52F32E69733EEFCCD99A021B4AE41F0EAF5B10B7B8FA41B1C694C22B7A149DF0EDED04DA60991C3C70AF9765BC0CDC3BD1392159455B417FBC6F6E5C33C098EC56CC72FE2C0BCE82302DECD14149DEDACB88D7266FF39BE23502B54A7357C0D600A71A705BBB9385D3074AA5D88940666818E5A7F5E7BFAA7E994198B0E89D58B3CAC7B1376890586243AB8ED170BA77D3EDF43291A7CE3091E3453B66361D135BCDFBACE08731DBA78F87476C40AF7548A73C0EBE62224DF3272B8A9DB2EEB2327412B783D9038272A23613208070BAB131A45B1571FCEE499E3B944D1E46F039C7379B29C52A0BB7D53AAE580FA2F5FD4A2C852601C01494E3AD18601D3A9301F2CA0C1D8C28097B8D6A5E48251ADE61C06A553690F9DFF5DD59889F7E1EAA1825AB5106A19961B65C614A6DE38A5EBBC3FB48C3C6A3E9F267659CEA75DA105EA601ED0425F8A408E75D73178733ECA22A0D1FF6FFE99C3E88D7070B8C2C63B27D3BE3699BEB04CF4BC00AFD9E35320255EA92F6ACBC3E45878CD02329AEDAB9C981ACA4B4C73580EC2E6C4121D8410802389DAB92B58B472EB31065F1DFC3B9FAE232CD0254D4A11BC8457616A81AEE773E55D7824FB588264482160AAE51AF4CE69A979CA40C8BE44B305629B4ED1007A3AB25BA4AD52176E87CF4BD141DD14EF8FF43204F289BC3DC54A9A863A2DC8E23CD283E2BA65C17AEA38E2A3B68DE0A93EDE4BEA41CA0DAFE4CF9343C39854D1B61DC07D6A2183A0B2A2D0ED9D7C70354EED18E165F037D56DA7DAB37B727AA9AE0D7F7468CF8DD6D8DE4DE204B582BB3FF906237B46385EC36DD450ABD2A3E438688A4D58E0902E8292E68E31D690976133C1379DF8B8DDBC8B16F8E61A60F2E2FCB4BF49AACEF31595A471655EF207BF0D117D1B7A22FE0895CA4E2C209772F7A72D38EFDA5C397B94AF9EE7A9DA66E1CAA0794FF62E72043
3A72643BE497063B1525A4BBD93CB558FF74699A58FCC924E27B2CAA14A1B7FFD640BF20099E887CE6A270598746CE6B713E57AC68D33652590532D26CAC02F47BE650C65C18443D71683AAA1DAC69F0CD29F976EF0CDBDA10687572F66D12DF8217A3772026551E29E96879DE31A40ABB08F252C97735FD574CFEA7FDFE37ECD2DE66BB378A59C80ACEF3F7B9C1DEE790E0E25D26C227359E6135F4CA6D2BC725E85F81E8BEEE306A8BBAFDA8E080DCD1A4DF77E1471B1DCED5983210975968B1750C8BE2717597DDF2A095A442710ECB3FB723AF7EBE939905BBFDC8B229F5678B6278205D4DD05FD5D63D979789553B338A2370AD27687432E32604491583E6635C3901A85611DC76222EEC2BE2F58341869F7A83DE19751FB446C279FF8D662BB7DF0E4DBDE96B495DEC6FDCE24EF000183246987D2AACA12667231D89D45C1F6EF608BCB93B91D19A7D22ABD40169A6ED560E48A7CA9239E9FBFAAEE1CDBE6DACA2D50D58A34B3B4FE514B435DA9F3B58512CAB2046E5A66C9754F679E3E34A2207012B2C2A7B33A974A8874A4230EA22BF733CB25B60E7287FC1AB27EEA3062F7D855D477AC42301A3A662C9C7C782E4E6BC68429770FB6C7A49449A57C2F3C1C75845D5B6957D11E9B3856FA5699D09B08531ECCB1B204B3F8D76084A521FB7B70960C55D511D594B4664079D465F88715BFC4C11387A6351DAFAAF21FB5B1C938AB266603ECDD3639A6D399F3B02802980095B51770BFD899C8EE6B2D99C3EC1A44C1C238D3EACC3354A4D5CFDFDCF5E982DE3F44EDDBC37B4BBF397875A9853F1ACAAB68F8E64BC51D34BB005C3DCD977BC886C7F455832E1140F8E83394C87BB11786BEC6AB877CBF644892D912B806ECD890425EAA01E4797BB272274E4A31F18D8A4EFFD837D980016E7C9E37CD964901770EAB851A19C1B606C7A23F3C28747F3A54BEC009C44E5FB3E6BA5F1EFCBBACFE2DC536DF0F92DD293F4B96CE6CB32D8B1C42F8E29D2D9F2C294B9F31DC22C443CEAB2E75DAC0F06139138C37FDE9589D884DD5FFBD1972720C80FFB70FCA157C25311C4F8BC298FE7D28AE20DBA93F68063F6575EF0B020574966530EC4542E52F09434AA182213FA5645396BFA5D9C68041767A34A0651AABDF37F8C94147FF806DC19C6F62B2E0946DBDBF5083FF4E2DAE85DE6FA47E7D4E51C13256CA376FE26C00F7DBD4114D2951CDC306FBA40EC00F55779329F80D571FFC07E467A1372F3504ABC06A64F99621CF9CCEE64F34E94FFD0D71D8FDDD0393037EDBBACF9BDE4AD2D5210D1645FD08CA3BFA175F7B21A8D39A6BC845468B1CB3014915468081D15C6919A52651D2D1976BE8CAF9126C1874F35DBE019EDED6F24A7D3B52E1ACCAEDB772878CA4852E2345C653A9E44289990A1A102EFAEB0258E23367E4A521D1BC9EC594C3DC4


8DF5A8C70214F3FF9BC571D34DDE7573087297E3171AC96ECDA7DC9D0FB2CCD6C73788EBA97AE2A83F68C2E0C0CBE18D5C98B6453A7CF3B138F8A16A1E8837F9D4EDA8B0F44B65AB7F72C5F15C5C670FBB178A3206E3C9131F9F22BD4C033032B59C54FA4738F9D1B353232B6D5410B75C08CEF8F9F5A40371E293CF433979D6CD670F44061151840430F7244E56C79F3F9356EE90DF8A9F32E861C73EEB197F3284E86877083135D3DBF3B735FED90AD2E19235D5F8BD7EB45233765B085E4F8D775F59E4A0022DF9287974AEC2FC5E30E17AE956396BA89151CFDFD786BD056FE33CBAE8F3561522F268567D61B54DDE484A601BBA07646E040DE28DD71B8D907FB36F9A480DD5B2BD65B01902E24903A2594AA76D0383DF50C646BF17DE476EEF9BF86A96DF23F0E51B9D4B622FC0570FADA8EB2B17C980D55EF644DE084FBAEE1126C21F20ABA3E60198F5788E48D16339D0CC12C0EC4974261CF029D89E7433CA788CAB408FDB39DDF517825AB59E15209A787E5EC90E5FC0729991528DCE56EEF8D3B5715BC704DAA1B884950C48134F3BE06F0661857FA6487252287FB3F02DEFC4F285C003EDE96F4F85884DFC618C90E9022987A2C0A8DF256D4D9527555AD65A6EFD69B6576C503FF7A0B8E6B9B798BAD46F9F8E5DFABB79258F2A1037D731A232C77187722D0B88D931260A7795B561801776CCBB5E8C4FDB7F0346C43CAE42B5F86AD989B536ADCBEF8951B617CAC525146B6AC483AE6567FB3E0DCD7E86BA31A70D32FC1476638DBFCB5B8018DB11BE85CFC5802102297088734FFAB59E8590FCB5FADDF75D5B2C97192EE67BCB187EFB540A1C909B499FADE596E4D8EF15C868700BD7071EBA6EE95BA705F436A27B4A3C232B048B7B9B1D55C465AC82E467F4C7D7B1EB8A7F03CCDEA4C3D11160BB78063069F0A42BF596C0C8143860C5184FF66ACE4C09704C10FEE82A968478CECDF362C668331F2DFF6B71F75B54C63379E0BD478B582B38C0E80709F6E99F6F15A262DC9A1EE610E42CCC66A59DD3D3F811253638E2E4CB08CEB4B1AB16EEA1E37D1F87696C44B4EB7753E5B077C3DFA4776A1F138AE4DF6AF07013FDF3A344FA02537554B26A728C9E27ADAA91773940872EBD560DBCF953687D578D09413BF39B60A86ED769DBCF33F907FAC434134431764E46F5A281BBDD2D86DC3F7AA571BFD543F944A05623562B5E2A9EB5B46702BC148FB1097A2CFB8CF46E81BF9647F959A0A56D9A37E744B09E007B02084C6B623696F0522EEA54486860C6078481052DA2BACAFB630D9486FFE348FC0D155C765F1CF654E39587BA56A92F8417EB78D65C8EFF2140826477CC42F6987671AF66BEF78A1DF834729DD0B975012A786F9439F209640AEEBE735557E4AB264A199EB80E6D44E642A080E845DB2E0D318DFDED204DCE698771
41F32E4E1516F64A74E6F14AF5F31A54721580D752072002804EE29AAD2E87AC9C7F6DBF8E69016EFDE109F27904A35AD14F8017D98B58359CABCD4259F45FA1E012C9C5210BB3F756BF7AFAE47C0685E24D63692F1D549696A878CA7B82BD68B4AAFCC58239B331B29BA35CE7B57A76098ADE02307848E9194FC5457901B3F475023359024EFB65E30B81D8E8B1B251416C2449844CE82B4560FF042C2B6FECB65316A4B72342628DE5EA5D70A7CA3426FC777C7D02E9A609C586814929A5086DBD7B6EF1B2CE8197AC92B01BD0B2528FE78E73FB916323988DCEFD4C7300D7FC9F7480D7E5FF7741109332F38C404B5BF00B5CE0FA39E77711E928520AF4EFFEF903EBCA3728B5CC35767D075B0A4663593A13F5A7FD87DB66354BA4E87384C849B2F2765927A59121F8C5BBA59D3E9A01245796C097619808AA0A6CA38C6F30AC60AF9BAEB44C57C4E95E134D434041988068A041FBBBD179CB31AA28CF2D1F79F18F2596D0BD9752E8AAD24B98F9CF287CCB9B501D96F58CE528457C7C0B69DE2756707D314AD91C6A2300D64889BF93CBB293F73D1F73DF0E5EA422AE5D22372AA9D595F39EC700ACB8EBF050636F4E5504C6B40AB78D2CA8831D99DF20D9B0AF54D2DA2DD5DCB38EE286C704C341C8FC9C6182001F2CCFDF6533D65C6FCD91B5FCC6C87F011D7129165257A0D59B376AED7028061336ABC6BD20BDB6164DF04AEAF592C9192F0752F84EE798FA6CAA9285DDE0042E245C0DD8D0B4DBEBD0206421EBF8F442E942B6F87D2FD2A25431955B9E08B02F218AA39DFB02AAD20C36F8B25BD48F9724683B8B20AC066B65C2789122295B725C78B44ED7209591CBE7268217CF33546C941AAC84B72DBFD249EC915F9110260010E1F0691E5EC4C616BA9F72FD24DC152DB471D2843736ED16B4282566A4573422AC3AC5E8501E4D0217C3FA6DD9FB581A1E6543C33B28960BDA19668C318B396B3D6AB98E804A6BAEDAEA173F9DDCCE58F1BA945769808EC91CD53D8ABFA3FFB12FD0A4E48920CE19338D25C8A4C77FC1EAB71D38A30DBF71AF7AB700BDF47BE3979D87696E88A64B0390F3EC216AE644CCEA3588D21F77F0C764DADB9164924845CB9DA47EA6B3229321B6566520822CC93509F843E2A359FE22375B65AD536F16FA7F0973BAC967E74D7459B8EB8BAE6751ABAA2D5871393F49B0AB3B7FA0EAD87AAA2A4F30C340E62791FD3CE7D139915D38036F6969112C7EC783DC105C45723D6729CC5DE46D41CBDDC19735B7B362ABF4F4BBA8A6CD5FE72C6F93384B0832BD12F080F8239F3072E6FBFFFB315E7FD8126E1FF017100A08571A16E2CF581C79AC51BE2C141FEF8B7C07ECE87F0A7DDF3176AB5C3EFC1F54474390116B47AD9434062AB8C47479D7AA6D8D7B4B3A72E736F6CCC2B5FACB3F99BA50223D70DC5583C1065E
F793DD56B9AC54A4985CE3EFF48F94495BE84A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 801 707 rc
0 707 m
1147 707 l
1147 -153 l
0 -153 l
h
0 707 m
f
54 662 m
729 662 l
729 446 l
54 446 l
h
54 662 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
54 45 m
729 45 l
729 261 l
54 261 l
h
54 45 m
S
0 i
1 1 1 sc
CM
108 653 m
531 653 l
531 617 l
108 617 l
h
108 653 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
108 54 m
531 54 l
531 90 l
108 90 l
h
108 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 319.5 635 cm
/F1.1[ 24 0 0 -24 0 0]sf
-40.02 8.6640015 m
(!"!#$)[ 20.904000 13.344000 20.904000 9.336000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
108 599 m
531 599 l
531 563 l
108 563 l
h
108 599 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
108 108 m
531 108 l
531 144 l
108 144 l
h
108 108 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 319.5 581 cm
-48.683998 8.6640015 m
(!"!#%&)[ 20.904000 13.344000 20.904000 9.336000 15.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
108 545 m
531 545 l
531 509 l
108 509 l
h
108 545 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
108 162 m
531 162 l
531 198 l
108 198 l
h
108 162 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 319.5 527 cm
-72.216003 8.6640015 m
(&'\(\)*+\),-'\(.)[ 17.328000 13.776000 7.560000 12.888000 6.672000 13.344000 12.888000 7.560000 18.192000 13.776000 7.992000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
108 491 m
531 491 l
531 455 l
108 455 l
h
108 491 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
108 216 m
531 216 l
531 252 l
108 252 l
h
108 216 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 319.5 473 cm
-174.89999 8.6640015 m
($//\)00*+\),-'\(.123456789:5\),/;<)[ 15.552000 12.888000 12.888000 12.888000 12.000000 12.000000 6.672000 13.344000 12.888000 7.560000 18.192000 13.776000 7.992000 12.456000 6.216000 11.136000 13.776000 14.664000 6.672000 22.224000 5.328000 20.472000 12.888000 12.432000 6.672000 12.888000 7.560000 12.888000 6.672000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
549 653 m
711 653 l
711 563 l
549 563 l
h
549 653 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
549 54 m
711 54 l
711 144 l
549 144 l
h
549 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 630 608 cm
-76 -20.007996 m
(!"!)[ 20.904000 13.344000 0.000000 ] xS
-76 8.6640015 m
(89+9=\)8\)+,)[ 20.472000 12.888000 13.344000 12.888000 13.776000 12.888000 20.472000 12.888000 13.344000 0.000000 ] xS
-76 37.335999 m
(>?+/,7'+)[ 7.104000 13.344000 13.344000 12.888000 7.560000 5.328000 13.776000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
549 545 m
711 545 l
711 455 l
549 455 l
h
549 545 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
549 162 m
711 162 l
711 252 l
549 252 l
h
549 162 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 630 500 cm
-76 -20.007996 m
(@\),-'\(.)[ 17.328000 12.888000 7.560000 18.192000 13.776000 7.992000 0.000000 ] xS
-76 8.6640015 m
(89+9=\)8\)+,)[ 20.472000 12.888000 13.344000 12.888000 13.776000 12.888000 20.472000 12.888000 13.344000 0.000000 ] xS
-76 37.335999 m
(>?+/,7'+0)[ 7.104000 13.344000 13.344000 12.888000 7.560000 5.328000 13.776000 13.344000 0.000000 ] xS
0 1 1 0 72 554 cm
-88.452003 8.6640015 m
(@\),-'\(.*A'897+)[ 17.328000 12.888000 7.560000 18.192000 13.776000 7.992000 12.456000 6.672000 14.232000 13.776000 20.472000 12.888000 5.328000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 707 cm
319.5 90 m
319.5 108 l
S
319.5 144 m
319.5 162 l
S
319.5 198 m
319.5 216 l
S
0 i
1 1 1 sc
CM
54 419 m
729 419 l
729 149 l
54 149 l
h
54 419 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
54 288 m
729 288 l
729 558 l
54 558 l
h
54 288 m
S
252 252 m
252 522 l
S
/Cs2 SC
0 sc
0 i
0 1 1 0 90 286 cm
-111.108 -5.6719971 m
(B\)C7/\)#9+A#=9,\)-9D*)[ 16.896000 12.888000 12.000000 5.328000 12.888000 12.888000 9.336000 12.888000 13.344000 14.232000 9.336000 13.776000 12.888000 7.560000 12.888000 18.192000 12.888000 12.000000 0.000000 ] xS
-40.02 23 m
(A'897+)[ 14.232000 13.776000 20.472000 12.888000 5.328000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
189 185 m
324 185 l
324 158 l
189 158 l
h
189 185 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
189 522 m
324 522 l
324 549 l
189 549 l
h
189 522 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 256.5 171.5 cm
-40.692001 8.6640015 m
(!"!#B)[ 20.904000 13.344000 20.904000 9.336000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
117 401 m
387 401 l
387 293 l
117 293 l
h
117 401 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
117 306 m
387 306 l
387 414 l
117 414 l
h
117 306 m
S
0 i
1 1 1 sc
CM
171 392 m
333 392 l
333 365 l
171 365 l
h
171 392 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
171 315 m
333 315 l
333 342 l
171 342 l
h
171 315 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 252 378.5 cm
-40.02 8.6640015 m
(!"!#$)[ 20.904000 13.344000 20.904000 9.336000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
171 356 m
333 356 l
333 329 l
171 329 l
h
171 356 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
171 351 m
333 351 l
333 378 l
171 378 l
h
171 351 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 252 342.5 cm
-48.683998 8.6640015 m
(!"!#%&)[ 20.904000 13.344000 20.904000 9.336000 15.552000 0.000000 ] xS
1 0 0 -1 252 309.5 cm
-41.352001 8.6640015 m
(!"!#E)[ 20.904000 13.344000 20.904000 9.336000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
495 401 m
693 401 l
693 293 l
495 293 l
h
495 401 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
495 306 m
693 306 l
693 414 l
495 414 l
h
495 306 m
S
0 i
1 1 1 sc
CM
513 392 m
675 392 l
675 365 l
513 365 l
h
513 392 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
513 315 m
675 315 l
675 342 l
513 342 l
h
513 315 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 594 378.5 cm
-40.02 8.6640015 m
(!"!#$)[ 20.904000 13.344000 20.904000 9.336000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
513 356 m
675 356 l
675 329 l
513 329 l
h
513 356 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
513 351 m
675 351 l
675 378 l
513 378 l
h
513 351 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 594 342.5 cm
-48.683998 8.6640015 m
(!"!#%&)[ 20.904000 13.344000 20.904000 9.336000 15.552000 0.000000 ] xS
1 0 0 -1 594 312.5 cm
-40.692001 8.6640015 m
(!"!#B)[ 20.904000 13.344000 20.904000 9.336000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 707 cm
486 252 m
486 360 l
532.95654 375 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 256.5 124 cm
/F1.1[ 18 0 0 -18 0 0]sf
-107.5 6.2480011 m
(!"!#$F*!"!*9GGH7/9,7'+)[ 15.678000 10.008000 15.678000 7.002000 11.664000 5.004000 5.004000 15.678000 10.008000 15.678000 5.004000 9.666000 10.674000 10.674000 3.996000 3.996000 9.666000 9.666000 5.670000 3.996000 10.332000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
117 275 m
387 275 l
387 212 l
117 212 l
h
117 275 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 707 cm
117 432 m
387 432 l
387 495 l
117 495 l
h
117 432 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 252 243.5 cm
/F1.1[ 24 0 0 -24 0 0]sf
-100.464 -5.6719971 m
(!"!*9\(\)9*+\),-'\(.)[ 20.904000 13.344000 20.904000 6.672000 12.888000 7.560000 12.888000 12.888000 6.672000 13.344000 12.888000 7.560000 18.192000 13.776000 7.992000 0.000000 ] xS
-125.124 23 m
(1I7=J\)\)5*KH?\),'',L5\),/;<)[ 6.216000 14.664000 5.328000 13.776000 14.232000 12.888000 12.888000 6.672000 6.672000 16.440000 5.328000 13.344000 12.888000 7.560000 13.776000 13.776000 7.560000 13.344000 6.672000 12.888000 7.560000 12.888000 6.672000 0.000000 ] xS
1 0 0 -1 522 124 cm
/F1.1[ 18 0 0 -18 0 0]sf
-94 6.2480011 m
(!"!#BF*!"!*A\)C7/\))[ 15.678000 10.008000 15.678000 7.002000 12.672000 5.004000 5.004000 15.678000 10.008000 15.678000 5.004000 10.674000 9.666000 9.000000 3.996000 9.666000 0.000000 ] xS
1 0 0 -1 247.5 88 cm
-98.5 6.2480011 m
(!"!#EF*!"!*=9,\)-9D)[ 15.678000 10.008000 15.678000 7.002000 13.662000 5.004000 5.004000 15.678000 10.008000 15.678000 5.004000 10.332000 9.666000 5.670000 9.666000 13.644000 9.666000 0.000000 ] xS
1 0 0 -1 571.5 88 cm
-143.5 6.2480011 m
(!"!#%&F*!"!*0\)\(C7/\)*/9G9J7H7,7\)0)[ 15.678000 10.008000 15.678000 7.002000 11.664000 12.996000 5.004000 5.004000 15.678000 10.008000 15.678000 5.004000 9.000000 9.666000 5.994000 9.000000 3.996000 9.666000 9.666000 5.004000 9.666000 9.666000 10.674000 9.666000 10.674000 3.996000 3.996000 3.996000 5.670000 3.996000 9.666000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
